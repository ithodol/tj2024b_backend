[디자인패턴]
	- 패턴이란? 되풀이되는
	- 소프트웨어 설계 과정에서 자주 발생하는 문제들의 설계 유형
	- 종류
		1. 싱글톤 패턴
[싱글톤패턴]
	정의 : 프로그램내 객체(인스턴스)가 단 하나만 존재하는 패턴/설계
	목적 : 하나의 객체(인스턴스)를 만들고 메모리를 공유하기 위함
		- 여러개의 객체가 존재하면 서로 다른 메모리를 사용하므로 공유하는데 제약이 있다.
		- 서로 다른 객체는 서로 다른 메모리를 사용한다 => 공유하는데 제야깅 있음
		- 협업에 있어서 굳이 여러개의 객체(인스턴스)가 필요 없는 경우, 한 개만 있어도 되는 기능역할(회원가입 로그인 메소드)
		
	싱글톤 만드는 방법
		1. 디폴트생성자를 private 생성한다
			private 클래스명(){}
			
		2. 지정한 클래스에 private static 으로 객체(인스턴스) 선언하기
			private static 클래스명 멤버변수 = new 생성자명();
			
		3. 지정한 클래스에 public static 클래스명 getInstance 메소드를 선언한다
			public static 반환타입 getInstance(){
				return 멤버변수명;		
			}
			
	다른 클래스에서 싱글톤 호출하기
		클래스명.getInstance();
		
[MVC 패턴]
	목적 : 프로젝트를 설계할 때 복잡한 코드와 파일들을 MVC패턴에 다라 구성하는 방법
	정의 : 소프트웨어 개발에서 사용되는 디자인패턴으로 세가지 주요 역할 분리하고 코드의 모듈화와 유지보수성을 높인다.
	장점 : 협업, 유지보수, 모듈화, 단일기능 제공 등
	단점 : 여러 파일로 분리하기 때문에 관리 복잡도가 높다.
		- 예) 1인 식당(사장님이 서빙, 요리, 재료준비 모두 맡음) : 규모가 작으니 혼자서도 운영 가능
			 직원이 있는 식당(서빙직원, 요리직원, 재료준비직원) : 규모가 커지면 여러 파트를 나눠서 운영함
				- 직원들에게 업무분담을 하는 이유는? 전문성, 문제파악이 쉬움, 문제해결이 빠름 등
			
			소규모 프로그램은 하나의 클래스에서도 가능하지만,
			대규모 프로그램은 여러개의 클래스로 나눠서 운영함
				- 클래스들을 각 분리하는 이유는? 문제가 발생했을 때 유지보수성을 높일 수 있다	
		
	역할
		@ M(model) : 데이터 관리 담당
			주로 웹/앱에서는 JAVA 언어(백엔드)
			데이터베이스(DB)와 상호작용
			주요 키워드
				- DAO(data access object)		: 데이터베이스와 상호작용을 담당하는 객체
				- VO		: (일단 제외)
				- DTO(data transfer object)	: 서로 다른 레이어/계층 간의 데이터를 이동하는 객체
			관례적인 규칙
				- DAO객체
					굳이 여러개의 객체가 필요없음
					싱글톤 적용 가능
				- DTO객체
					여려개의 객체가 필요함
					싱글톤 적용 불가능, 단일 객체, 복수 객체 = 배열, 컬렉션프레임워크 사용
				- consloe 프로젝트 : print, scan 함수 사용 불가능
					단, 개발 테스트 목적으로는 사용 가능
			
		@ V(view) : 입출력 담당
			주로 웹/앱에서는 HTML/CSS/JS/ 언어(프론트엔드)
			사용자의 입출력을 담당
			관례적인 규칙
				consle 프로젝트 : view 클래스에서만 print, scan 함수를 사용함
			
			
		@ C(controller) : Model - view 사이의 제어, 전달 및 유효성 검사 담당
			주로 웹/앱에서는 JAVA 언어(백엔드)
			사용자(view)로부터 요청 받아 model 에게 전달하고 결과를 받음
			주요 키워드
				MVC1 패턴 		: controller
				MVC2 패턴 3티어	: controller + service
			관례적인 규칙
				consloe 프로젝트 : print, scan 함수 사용 불가능
					단, 개발 테스트 목적으로는 사용 가능
					데이터베이스 접근 불가능


	세 가지 역할 흐름도
		[요청]
			사용자 --> VIEW --> CONTROLLER --> MODEL(DAO)
		[응답]
			사용자 <-- VIEW <-- CONTROLLER <-- MODEL(DAO)
		
		[주의할점]
			개발자는 위 흐름순서와 다르게 코드 작성이 가능하지만 
			관례적인 패턴규칙으로 위 흐름코드를 따라 작성해야함

[실습 예1]
	day13 패키지
	boardprogram8 패키지
		controller 패키지
			BoardController 클래스	*싱글톤O	입력받은 게시물정보를 받아 
		model 패키지
			dao 패키지
				BoardDao 클래스		*싱글톤O
			dto 패키지
				BoardDto 클래스		*싱글톤X
		
		view 패키지
			BaordView 클래스			*싱글톤O
		AppStart 클래스				*싱글톤X



[ 실습 예2 ]
				[view]					[controller]					[dao]

게시물등록
	- [BoardDto]boardDto : view에서 사용자로부터 입력받은 title,content,writer 3가지 정보를 하나의 객체로 구성.
		-> 이동할때 3개 이동하는게 좋은지 1개가 이동하는게 좋은지??
	- [boolean] true/false : dao 에서 등록 처리 결과를 성공 과 실패를 표현하기위해 임의로 성공하면 true 실패하면 false 구성
						-------------->				----------------->
						[BoardDto]boardDto			[BoardDto]boardDto
						<--------------				<-----------------
						[boolean]true/false			[boolean]true/false
게시물출력 
	- x : 출력 요청 시 요구사항이 없으니까.
	- [ BoardDto[] ] boards : dao 에서 관리하는 모든 게시물목록[배열]을 view에게 전달하기위해서 
						-------------->				------------------>
								x							x
						<---------------			<------------------
						[ ArrayList<BoardDto> ] boards		[ ArrayList<BoardDto> ] boards
게시물삭제
	- [int] dIndex : 삭제가 가능하도록 고유한 식별번호 , 인덱스 , 게시물번호
	- [boolean] true/false : dao 에서 삭제 처리 성공/실패 여부를 true/false 로 구성하여 반환 
						--------------->			------------------>
						[int] dIndex				[int] dIndex
						<--------------				<------------------
						[boolean]true/false			[boolean]true/false			
게시물수정 
	- [int] uIndex ,[BoardDto] boardDto	 : 수정시 수정할 식별번호 와 수정할 값들을(객체) 보낸다.
	- [boolean] true/false : dao 에서 수정 처리 성공/실패 여부를 true/false 로 구성하여 반환 
						--------------->			------------------>
						[int] uIndex , 				[int] uIndex 
						[BoardDto] boardDto			[BoardDto] boardDto
						<--------------				<------------------
						[boolean]true/false			[boolean]true/false		





		
		





























