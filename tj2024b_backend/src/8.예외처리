[예외처리]
	1. 실행 오류 종류
		(1) 시스템 오류 : 시스템이 종료되는 수준의 심각한 문제
			- 프로그램 개발자가 예측하기 어렵고 제어하기 힘든 메모리관련 오류
		(2) 예외 : 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생하는 문제
			- 시스템 오류와 다르게 예측하여 제어 가능함  경험이 중요함
			
			
	2. 예외 종류
		(1) 일반예외 : 컴파일러(번역)할 때 예외 처리 코드 여부를 감사하는 예외, 에디터(이클립스/vs ...)에서 오류 메세지
				- 입출력 예외, 네트워크, 파일, JDBC(JAVA-DB연동) ... , 주로 외부요소와 통신
		(2) 실행예외 : 컴파일러(번역)할 때 예외 처리 코드 여부를 검사하지 않는 예외
				- null, 캐스팅, 인덱스 ... 주로 개발자의 겸험 의존성이 크다. 꼼꼼해야 한다
				
				
	3. 예외 처리 목적 : 비정상적인 프로그램 종료 방지, 안전하게 24시간 실행되는 프로그램, 유지보수
	
	
	4. 예외처리 문법
		try{
			예외가 발생하거나 할 것 같은(예측)코드
		}catch(예외클래스명 변수명){
			예외가 발생했을 때 실행코드
		}catch(예외클래스명 변수명){
			예외가 발생했을 때 실행코드
		}finally{
			예외 여부 상관없이 무조건 실행코드;
		}
		
		* 다중 catch 가능할 때 주의할점 : Exception 사용시 마지막 catch 에서 사용
		
		
	5. 예외 클래스
		- 예외가 발생했을 때 발생 이유, 정보가 저장되는 클래스 타입
		- 문제점을 저장하고 로그 처리하여 추후에 유지보수에 사용된다
		(1) Exception 클래스 : 예외 처리 클래스 중에 슈퍼클래스
			- 일반예외
				ClassNotFoundException
				IOException
			- 실행예외
				NullPointerException
				ArrayIndexOutOfBoundsException // 지정한 인덱스가 없을 때
				InputMismatchException // 
				NumberFormatException
				.
				.
								
				
	5. 예외 떠넘기기/던지기
		- 여러 곳에서 발생하는 예외를 특정한 곳에서 한 번에 처리할 경우 주로 사용
		- 메소드에서 발생하는 예외를 메소드를 호출한 곳으로 예외를 보내는 방법(주로 메소드에서 사용)
		- 예외 던지기 문법
			반환타입 메소드명(타입 매개변수) throws 예외클래스{
			
			}
				
			
			
			
			
			
			
			
			
			
			
			
			
	